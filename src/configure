#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# ensure data directory exists
directory '/var/db/portal' do
  recursive true
end

# ensure the etc config directory exists
directory '/etc/portal' do
  recursive true
end

# generate the config file
template '/etc/portal/config.json' do
  source 'portal/config.json.erb'
  mode 0644
  variables ({ config: payload[:config] })
  owner 'gonano'
  group 'gonano'
end

# configure narc
template '/opt/gonano/etc/narc.conf' do
  variables ({
    uid: payload[:component][:uid], logvac: payload[:logvac_host]
  })
end

if payload[:platform] == 'production'

  # start portal to register itself as an external service
  execute '/opt/nanobox/hooks/start'

  execute 'register api service' do
    command <<-END
      portal -i -t #{payload[:config][:token]} -P 8444 add-service \
        -j '{
              "interface": "eth0",
              "port": 8443,
              "type": "tcp",
              "scheduler": "rr",
              "persistence": 0,
              "netmask": "",
              "servers": [
                {
                  "host": "127.0.0.1",
                  "port": 8444,
                  "forwarder": "m",
                  "weight": 5,
                  "upper_threshold": 0,
                  "lower_threshold": 0
                }
              ]
            }'
    END
    only_if { `portal -i -t #{payload[:config][:token]} -P 8444 show-services | grep eth0`.empty? }
  end

  # stop portal
  execute '/opt/nanobox/hooks/stop'

end

if payload[:platform] != 'local'

  # Setup root keys for data migrations
  directory '/root/.ssh' do
    recursive true
  end

  file '/root/.ssh/id_rsa' do
    content payload[:ssh][:admin_key][:private_key]
    mode 0600
  end

  file '/root/.ssh/id_rsa.pub' do
    content payload[:ssh][:admin_key][:public_key]
  end

  file '/root/.ssh/authorized_keys' do
    content payload[:ssh][:admin_key][:public_key]
  end

  # Create some ssh host keys
  execute "ssh-keygen -f /opt/gonano/etc/ssh/ssh_host_rsa_key -N '' -t rsa" do
    not_if { ::File.exists? '/opt/gonano/etc/ssh/ssh_host_rsa_key' }
  end

  execute "ssh-keygen -f /opt/gonano/etc/ssh/ssh_host_dsa_key -N '' -t dsa" do
    not_if { ::File.exists? '/opt/gonano/etc/ssh/ssh_host_dsa_key' }
  end

  execute "ssh-keygen -f /opt/gonano/etc/ssh/ssh_host_ecdsa_key -N '' -t ecdsa" do
    not_if { ::File.exists? '/opt/gonano/etc/ssh/ssh_host_ecdsa_key' }
  end

  execute "ssh-keygen -f /opt/gonano/etc/ssh/ssh_host_ed25519_key -N '' -t ed25519" do
    not_if { ::File.exists? '/opt/gonano/etc/ssh/ssh_host_ed25519_key' }
  end

end
